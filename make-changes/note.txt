1. try out using [1, 2] to make changes of 8 cents;
                    =>  1   2
                    ----------
{2,2,2,2}           =>  0   4
{1,1,2,2,2}         =>  2   3
{1,1,1,1,2,2}       =>  4   2
{1,1,1,1,1,1,2}     =>  6   1
{1,1,1,1,1,1,1,1}   =>  8   0

How about 13 cents?
=>  1   2
----------
    1   6
    3   5
    5   4
    7   3
    9   2
    11  1
    13  0

2. try out using [1, 2, 5] to make changes of 13 cents;
=>  1   2   5   for 13
--------------
    1   1   2       1   for 13 - 5 = 8
    3   0   2       1
    0   4   1       0
    2   3   1       0
    4   2   1       0
    6   1   1       0
    8   0   1       0
    1   6   0
    3   5   0
    5   4   0
    7   3   0
    9   2   0
    11  1   0
    13  0   0

3. algorithm:
given a set of k denominators, such as k=4 for the set {1, 5, 10, 25},
using that to make changes for N cents:

changes(mint[], k, N) :
changes(mint[], k-1, N) + changes(mint[], k, N-mint[k])

4. ending/exit conditions
if( N < 0 ) return 0;
if( N == 0 ) return 1;
if(k <= 0 && N > 0) return 0;
